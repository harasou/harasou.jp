<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel on harasou.jp</title><link>https://harasou.github.com/harasou.jp/tags/kernel/</link><description>Recent content in kernel on harasou.jp</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 05 Dec 2017 21:11:25 +0900</lastBuildDate><atom:link href="https://harasou.github.com/harasou.jp/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>libfuse で Hello World !</title><link>https://harasou.github.com/harasou.jp/2017/12/04/fuse/</link><pubDate>Tue, 05 Dec 2017 21:11:25 +0900</pubDate><guid>https://harasou.github.com/harasou.jp/2017/12/04/fuse/</guid><description>&lt;p>GlusterFS でも利用されている FUSE を使って、Hello World を試して見た。
今回は libfuse を使って、仮想ファイルシステム上のファイルを cat すると Hello World !
が出力されるまで。&lt;/p></description></item><item><title>Linux ACL の基礎</title><link>https://harasou.github.com/harasou.jp/2016/06/29/linux-acl/</link><pubDate>Wed, 29 Jun 2016 23:37:56 +0900</pubDate><guid>https://harasou.github.com/harasou.jp/2016/06/29/linux-acl/</guid><description>&lt;p>「Linux プログラミングインタフェース」再び。&lt;/p>
&lt;p>輪読やりながら「こんな機能使うのか？」って、みんな文句言いながら読んでいた章。ここで触っとかないと、今後「ACL とか知らねぇ。」ってなりそうなので、まとめておく。&lt;/p></description></item><item><title>Sparse File (スパースファイル) の仕組み</title><link>https://harasou.github.com/harasou.jp/2016/03/24/sparse-file/</link><pubDate>Thu, 24 Mar 2016 01:33:20 +0900</pubDate><guid>https://harasou.github.com/harasou.jp/2016/03/24/sparse-file/</guid><description>&lt;p>最近かなり流行っている「Linux プログラミングインタフェース」を読んでたら、lseek(2) の解説で Sparse File (スパースファイル) の話が出てきたので、実装が気になって調べてみた。&lt;/p></description></item><item><title>カーネルモジュールの modinfo について</title><link>https://harasou.github.com/harasou.jp/2015/11/04/kernel-module-modinfo/</link><pubDate>Wed, 04 Nov 2015 00:00:36 +0900</pubDate><guid>https://harasou.github.com/harasou.jp/2015/11/04/kernel-module-modinfo/</guid><description>&lt;p>&lt;a href="http://harasou.github.io/2015/11/03/loadable-kernel-module/">前回カーネルモジュールを作った&lt;/a>際に、&lt;code>MODULE_XXXX&lt;/code> というマクロでモジュール内に情報を埋め込んだが、これがどういう風に埋め込まれているのか調べてみた。環境は今回も CentOS7 (3.10.0-123.4.4.el7.x86_64)。&lt;/p></description></item><item><title>カーネルモジュールで Hello World !</title><link>https://harasou.github.com/harasou.jp/2015/11/03/loadable-kernel-module/</link><pubDate>Tue, 03 Nov 2015 01:14:38 +0900</pubDate><guid>https://harasou.github.com/harasou.jp/2015/11/03/loadable-kernel-module/</guid><description>&lt;p>Linux のカーネルモジュールで Hello World してみる。insmod、rmmod した時に dmesg にログを吐くだけの単純なもの。試した環境は、CentOS7 (3.10.0-123.4.4.el7.x86_64)。&lt;/p></description></item><item><title>Linux kernel を読むための準備</title><link>https://harasou.github.com/harasou.jp/2015/10/26/linux-kernel-reading/</link><pubDate>Mon, 26 Oct 2015 05:06:59 +0900</pubDate><guid>https://harasou.github.com/harasou.jp/2015/10/26/linux-kernel-reading/</guid><description>&lt;p>仕事で kernel のソースが見る機会が度々ありそうなので、MAC上でソースをいつでも追えるように準備しておく。
準備といっても大したものではなく、&lt;/p>
&lt;ul>
&lt;li>kernel ソースのダウンロード&lt;/li>
&lt;li>tag の作成&lt;/li>
&lt;li>vim の設定&lt;/li>
&lt;/ul>
&lt;p>ぐらい。tag については、GNU GLOBAL などもあるが、とりあえず ctags で。&lt;/p></description></item></channel></rss>